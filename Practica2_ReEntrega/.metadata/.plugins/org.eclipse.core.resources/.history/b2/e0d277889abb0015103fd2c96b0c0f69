

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.util.Scanner;
import java.util.Vector;
import com.csvreader.CsvWriter;

public class main {

	static final int FASES = 4;

	public static void main(String[] args) {
		int opcion;
		Scanner s = new Scanner(System.in);
		
		menu();
		opcion = s.nextInt();
		while (opcion != 3){
			procesarOpcion(opcion);
			menu();
			opcion = s.nextInt();
		}	
	}
	
	public static void menu(){
		
		System.out.println("1 - Aleatoria");
		System.out.println("2 - Libre de escala");
		System.out.println("3 - Salir");
		System.out.print ("Elige la opcion: ");
	}
	
	public static void procesarOpcion(int opcion){
		int nodos, t, m;
		Scanner s = new Scanner(System.in);
		
		switch (opcion){
		case 1:
			System.out.println("Numero de nodos:");
			nodos = s.nextInt();
			aleatoria(nodos);
		break;
		case 2:
			System.out.println("Numero de nodos:");
			nodos = s.nextInt();
			m=3;
			libreDeEscala(nodos,m); 
			libreDeEscala(nodos,m+1);
		break;
		}
	}
	
	/****************************
		RED ALEATORIA
	 */
	private static void aleatoria(int nodos){
		String nombreArchivo = "C:\\pr2\\"+ nodos + "_Nodos.csv", fase = "";
		double p;
		
		//Generar nodos
        String texto = "id;nombre\n";
        int i,aux;
        for(i=1; i<=nodos; i++){
    		texto += i+";"+"nodo: "+i+"\n";
    	}
	    try{
	        FileWriter fwriter = new FileWriter(nombreArchivo);
	        fwriter.write(texto);
	        fwriter.flush();
	        fwriter.close();
	        
	    }catch (IOException e){}
	    
	    System.out.println("Nodos de red aleatoria creados");
	  //Generar aristas para cada fase	
	    
	    p = ajustarP(nodos);
	    
        for (int j = 1; j <= FASES; j++){
        	switch (j){
        	case 1://Subcritica
        		fase = "Subcritica";
        		aristasAleatoria(nodos,p, fase);
        	break;
        	case 2://Critica
        		fase = "Critica";
        		aristasAleatoria(nodos,p, fase);
        	break;
        	case 3://Supercritica
        		fase = "Supercritica";
        		aristasAleatoria(nodos,p, fase);
        	break;
        	case 4://Conectada
        		fase = "Conectada";
        		aristasAleatoria(nodos,p, fase);
        	break;
        	}
        }  
	}
	
	private static double ajustarP (int nodos){
		double p = 0;
		
		switch (nodos){
		case 500:
			p = 0.002;
		break;
		case 1000:
			p = 0.001;
		break;
		case 5000:
			p = 0.0002;
		break;
		}
		
		return p;
	}
	
	private static void aristasAleatoria(int nodos, double p, String fase){
		StringBuffer texto = new StringBuffer(10000000);
		texto.append("Source").append(";").append("Target").append(";").append("Type\n"); 
		String csv = "C:\\pr2\\aristasAleatoria\\aristasAleatoria_"+ nodos + "_nodos_" + fase;
		try {
			CsvWriter writer = new CsvWriter(new FileWriter(csv), ',');
		int i;
		double aux = 0;
									  //N=500  	N=1000  	N=5000
		//Subcritica: p<1/N 		 ej:0.001, 	0.0005, 	0.0001
		//Critica: p=1/N  			 ej:0.002, 	0.001,  	0.0002
		//Supercritica: p>1/N   	 ej:0.003, 	0.002,  	0.0003
		//Conectada: p>=lnN/N 		ej:>0.0124, >0.00690, 	>0.001703
		
		
        for(i=1; i<=nodos; i++){
        	 for(int j=i+1; j<=nodos; j++){
        		 switch (fase){
             	 case "Subcritica":
             		 aux = (Math.random());
             		 if(aux < p)
                    	texto.append(i).append(";").append(j).append(";").append("Undirected").append("\n");
             	 break;
             	 case "Critica":
             		 aux = (Math.random());
             		 if(aux == p)
             			texto.append(i).append(";").append(j).append(";").append("Undirected").append("\n");
             	 break;
             	 case "Supercritica":
             		 aux = (Math.random());
             		 if(aux > p)
             			texto.append(i).append(";").append(j).append(";").append("Undirected").append("\n");
             	break;
             	case "Conectada":
             		 aux = (Math.random());
             		if(aux >= Math.log(nodos)/nodos)
             			texto.append(i).append(";").append(j).append(";").append("Undirected").append("\n");
             	break;
             	}
        		 writer.write(texto.toString());
        		 writer.endRecord(); 
        		 texto.delete(0, texto.length());
             }
        	 System.out.println("Acabado el nodo " + i + " "+ fase);
        	 
        }
        System.out.println("Aristas red aleatoria " + fase + " creadas");
        if (fase == "Conectada")
        	System.out.println("Red Aleatoria completada");
        
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
		
	
	 /****************************
		RED LIBRE DE ESCALA
		Utilizar� el mismo csv de nodos generado por la aleatoria
	  */
	private static void libreDeEscala(int nodos,int m){
		String nombreCarpeta = "C:\\pr2\\aristasLibreEscala";
		File carpeta = new File(nombreCarpeta);
		carpeta.mkdir();
		String nombreArchivo4 = carpeta.getAbsolutePath() + "\\aristasLDE_" + nodos + "_nodos_" + m + "_enlaces.csv";
		String texto = "Source;Target;Type\n";
        int i,aux;
        int k, t = 0, contadorLista = 0, p = 0, nodo1, nodo2, nodoAleatLista;
        Nodo nodo= new Nodo();
        Vector auxiliar = new Vector(2);
        Vector listaAristas[] = new Vector[1000000];
		Nodo listaNodos[]= new Nodo[nodos];
		boolean conectado = false;
		for (int x=0; x<nodos; x++){
			listaNodos[x] = new Nodo();
			listaNodos[x].setIdNodo(x+1);
		}
        //Generar aristas
        
        //los 4 o 5(en funcion de m) primeros nodos entre si
		for(k=1; k<=(m+1); k++){
			for(int l=k+1; l<=m+1; l++){
				texto += k+";"+l+";"+"Undirected"+"\n";
				Vector arista = new Vector(2);
				arista.addElement(listaNodos[k-1].getIdNodo());
				arista.addElement(listaNodos[l-1].getIdNodo());
				listaAristas[contadorLista] = arista;
				contadorLista++;
				listaNodos[k-1].aumentarGrado();
				listaNodos[l-1].aumentarGrado();
			}
		}
		if (m == 3) k=4;//sale con valor 5 del for
		else k = 5;
		int T =nodos-(m + 1);
		double probabilidad;
		double probCumpla;
		int nuevoNodo= m+1;
		//resto de aristas
		System.out.println("Procesados nodos iniciales con " + m + " enlaces");
		System.out.println("Procesando resto de nodos...");
		while (t < T){
			k++;//para todos los nuevos nodos que se tienen que a�adir	
			//genero m enlaces 
				for (int n = 0; n < m; n++){	
					aux = (int) (Math.random()*k + 1); //posible nodo al que conectarse, numero entre 1 y 5 en la primera iteracion
					while (aux == k) // para evitar que un nodo este conectado consigo mismo
						aux = (int) (Math.random()*k + 1);
					//recorro la lista de aristas para ver si ya est� esa arista(tupla)
					while ((p < contadorLista)){
						nodo1 =(int)(listaAristas[p].elementAt(0));
						nodo2 =(int)(listaAristas[p].elementAt(1));
						if (((k == nodo1) && (aux == nodo2)) || ((k == nodo2) && (aux == nodo1))){
							aux = (int) (Math.random()*k+1);
							while (aux == k) // para evitar que un nodo este conectado consigo mismo
								aux = (int) (Math.random()*k + 1);
							p = 0;
						}
						else{
							p++;	
						}
					}
					//Cojo un indice (nodo) aleatorio de todos los que llevo excepto el nuevo que entra
					nodoAleatLista = (int) (Math.random()*k);
					while (!conectado){						
						//me quedo con su probabilidad
						probabilidad=((double)listaNodos[nodoAleatLista].getGrado()/(double)contadorLista);
						probCumpla=Math.random();
						if(probCumpla<=probabilidad){
							Vector arista = new Vector(2);
							arista.addElement(k);
							arista.addElement(aux);
							listaAristas[contadorLista] = arista;
							contadorLista++;
							p = 0;
							texto += k+";"+aux+";"+"Undirected"+"\n";
							nuevoNodo++;
							conectado = true;
						}
						else
							nodoAleatLista = (int) (Math.random()*k);	
					}
					
					conectado = false;	
				}
			t++;
		}

        try{
            FileWriter fwriter3 = new FileWriter(nombreArchivo4);
            fwriter3.write(texto);
            fwriter3.flush();
            fwriter3.close();
            
        }catch (IOException e){

        }
        System.out.println("Libre de escala "+ nodos + " nodos y "+ m + " enlaces acabada");	
	}
}


	
